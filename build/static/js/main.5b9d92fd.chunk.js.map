{"version":3,"sources":["services/JsonService.js","services/HTTPservice.js","components/JsonView.js","App.js","index.js"],"names":["JsonService","str","split","filter","char","length","timesCalled","matched","match","eval","this","countClouseBrackets","countOpenBrackets","findJson","slice","HTTPservice","obj","axios","post","JsonView","props","useState","setObj","comma","keys","setKeys","show","setShow","useEffect","Object","childChanged","key","value","changedValue","notifyParent","name","handleChange","event","target","handleBooleanChange","checked","handleNumberChange","Number","className","onClick","xmlns","width","height","fill","class","viewBox","d","map","idx","Array","isArray","array","type","onChange","ArrayView","setArray","changed","popItem","splice","item","App","fetching","url","a","fetch","res","text","rawData","handleSubmit","preventDefault","searchingFor","foundJson","console","log","save","error","onSubmit","for","id","placeholder","modified","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5b9d92fd.chunk.js","sourcesContent":["\nexport class JsonService {\n    static countOpenBrackets(str) {\n        return str.split('').filter(char => char === '{').length;\n    }\n    \n    static countClouseBrackets(str) {\n        return str.split('').filter(char => char === '}').length;\n    }\n    \n    static findJson(str, timesCalled) {\n        if (timesCalled > 20) {\n            return null;\n        }\n        const matched = str.match(/\\{[^;=\\(\\)]*\\}/)[0];\n        try {\n            return eval('(' + matched + ')');\n        } catch {\n            if (this.countClouseBrackets(matched) > this.countOpenBrackets(matched)) {\n                return this.findJson(matched.slice(0,-1), timesCalled += 1);\n            } else if (this.countClouseBrackets(matched) < this.countOpenBrackets(matched)) {\n                return this.findJson(matched.slice(1), timesCalled += 1);\n            } else {\n                return this.findJson(matched.slice(1).slice(0,-1), timesCalled += 1);\n            } \n        }\n    }\n}","import axios from 'axios';\n\nconst API_JSON_CONTROLLER_URL = '/jsons';\n\nexport default class HTTPservice {\n\n    static post(obj) {\n        return axios.post(API_JSON_CONTROLLER_URL, obj);\n    }\n    \n}","import React, { useEffect, useState } from 'react';\nimport HTTPservice from '../services/HTTPservice.js';\n\n\nconst JsonView = (props) => {\n\n    const [obj, setObj] = useState({});\n    const comma = props.comma;\n    const [keys, setKeys] = useState([]);\n    const [show, setShow] = useState(false);\n\n    useEffect(() => {\n        setObj(props.obj)\n        setKeys(Object.keys(props.obj));\n    }, [props.obj]);\n\n    const childChanged = (key, value) => {\n        const changedValue = {\n            [key]: value\n        };\n\n        props.notifyParent(props.name, {\n            ...obj,\n            ...changedValue,\n        });\n    }\n\n    const handleChange = (event) => {\n        const name = event.target.name;\n        const value = event.target.value;\n        \n        const changedValue = {\n            [name]: value\n        };\n        \n        props.notifyParent(props.name, {\n            ...obj,\n            ...changedValue,\n        });\n        \n    }\n\n    const handleBooleanChange = (event) => {\n        const name = event.target.name;\n        const value = event.target.checked;\n        \n        const changedValue = {\n            [name]: value\n        };\n\n        props.notifyParent(props.name, {\n            ...obj,\n            ...changedValue,\n        });\n    }\n\n    const handleNumberChange = (event) => {\n        const name = event.target.name;\n        const value = event.target.value;\n        \n        const changedValue = {\n            [name]: Number(value)\n        };\n        \n        props.notifyParent(props.name, {\n            ...obj,\n            ...changedValue,\n        });\n    }\n\n\n    return (\n        <div className=\"d-inline-block ps-1\">\n        <div className=\"d-inline-block\">\n        <button className=\"my-button\" onClick={() => {setShow(!show)}}>\n        {show \n        ? <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-caret-down-fill\" viewBox=\"0 0 16 16\">\n        <path d=\"M7.247 11.14 2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z\"/>\n        </svg> \n        : <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-caret-right-fill\" viewBox=\"0 0 16 16\">\n        <path d=\"m12.14 8.753-5.482 4.796c-.646.566-1.658.106-1.658-.753V3.204a1 1 0 0 1 1.659-.753l5.48 4.796a1 1 0 0 1 0 1.506z\"/>\n        </svg>\n        }\n        </button>\n        </div>\n        {'{'}\n            {\n                show\n            ? <div className=\"d-flex\">\n            <div className=\"px-2\">\n            </div>\n            <div>\n            {\n                keys.map((key, idx) => {\n                return (\n                    <div>{\n                        typeof obj[key] === 'object' && !Array.isArray(obj[key])\n                        && <div className=\"d-flex\">\n                            <div className=\"d-inline-block\">{`${key}: `}</div>\n                            <JsonView obj={obj[key]} \n                            comma={idx !== keys.length - 1}\n                            name={key} \n                            notifyParent={childChanged}\n                            />\n                        </div>\n                        }\n                        {\n                            Array.isArray(obj[key])\n                            && <div className=\"d-flex\">\n                                <div className=\"d-inline-block\">{`${key}: `}</div>\n                                <ArrayView array={obj[key]} \n                                comma={idx !== keys.length - 1}\n                                name={key} \n                                notifyParent={childChanged}\n                                />\n                            </div>\n                        }\n                        {\n                            typeof obj[key] === 'boolean'\n                            && <div className=\"d-inline-block form-check form-switch px-0\">\n                            <label className=\"form-check-label\">{`${key}: `}</label>\n                            <input name={key}\n                             type=\"checkbox\" \n                             checked={obj[key]} \n                             value={obj[key]} \n                             className=\"form-check-input float-none ms-3\"\n                             onChange={handleBooleanChange}\n                             ></input>\n                            <div className=\"d-inline-block\">{(idx !== keys.length - 1) && ','}</div>\n                            </div>\n                        }\n                        {\n                            typeof obj[key] === 'number'\n                            && <div className=\"d-inline-block\">\n                            <label className=\"form-label\">{`${key}: `}</label>\n                            <input className=\"form-control d-inline-block ms-2\" name={key} type=\"number\" value={obj[key]} onChange={handleNumberChange}></input>\n                            {(idx !== keys.length - 1) && ','}</div>\n                        }\n                        {\n                            typeof obj[key] === 'string'\n                            && <div className=\"d-inline-block\">\n                            <label className=\"form-label\">{`${key}: `}</label>\n                            <input className=\"form-control d-inline-block ms-2\" name={key} type=\"text\" value={obj[key]} onChange={handleChange}></input>\n                            {(idx !== keys.length - 1) && ','}</div>\n                        }\n                    </div>\n                )\n            })\n            }\n            </div>\n            </div>\n            : '...'}\n            { comma ? '},' : '}' }\n        </div>\n    )\n\n}\n\nconst ArrayView = (props) => {\n\n    const [array, setArray] = useState([]);\n    const comma = props.comma;\n    const [show, setShow] = useState(false);\n\n    useEffect(() => {\n        setArray(props.array);\n    }, [props.array]);\n\n    const childChanged = (idx, value) => {\n        const changed = [...array];\n        changed[idx] = value;\n\n        props.notifyParent(props.name, changed);\n\n    }\n\n    const handleChange = (event) => {\n        const idx = event.target.name;\n        const value = event.target.value;\n        const changed = [...array];\n        changed[idx] = value;\n\n        props.notifyParent(props.name, changed);\n\n    }\n\n    const handleBooleanChange = (event) => {\n        const idx = event.target.name;\n        const value = event.target.checked;\n        const changed = [...array];\n        changed[idx] = value;\n\n        props.notifyParent(props.name, changed);\n\n    }\n\n    const handleNumberChange = (event) => {\n        const idx = event.target.name;\n        const value = event.target.value;\n        const changed = [...array];\n        changed[idx] = Number(value);\n\n        props.notifyParent(props.name, changed);\n\n    }\n\n    const popItem = (idx) => {\n        const changed = [...array];\n        changed.splice(idx, 1);\n\n        props.notifyParent(props.name, changed);\n\n    }\n\n    return (\n        <div className=\"d-inline-block ps-1\">\n        <div className=\"d-inline-block\">\n        <button className=\"my-button\" onClick={() => {setShow(!show)}}>\n        {show \n        ? <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-caret-down-fill\" viewBox=\"0 0 16 16\">\n        <path d=\"M7.247 11.14 2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z\"/>\n        </svg> \n        : <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-caret-right-fill\" viewBox=\"0 0 16 16\">\n        <path d=\"m12.14 8.753-5.482 4.796c-.646.566-1.658.106-1.658-.753V3.204a1 1 0 0 1 1.659-.753l5.48 4.796a1 1 0 0 1 0 1.506z\"/>\n        </svg>\n        }\n        </button>\n        </div>\n            {'['}\n            {\n                show\n                ? <div className=\"d-flex\">\n                    <div className=\"px-2\">\n                    </div>\n                    <div>\n                        {\n                            show\n                            ? array.map((item, idx) => {\n                            return (\n                                <div>\n                                    {\n                                        typeof item === 'object' && !Array.isArray(item)\n                                        && <div className=\"d-flex\">\n                                            <button className=\"my-button pop-button\" onClick={() => popItem(idx)}>\n                                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-x-lg\" viewBox=\"0 0 16 16\">\n                                            <path d=\"M1.293 1.293a1 1 0 0 1 1.414 0L8 6.586l5.293-5.293a1 1 0 1 1 1.414 1.414L9.414 8l5.293 5.293a1 1 0 0 1-1.414 1.414L8 9.414l-5.293 5.293a1 1 0 0 1-1.414-1.414L6.586 8 1.293 2.707a1 1 0 0 1 0-1.414z\"/>\n                                            </svg>\n                                            </button>\n                                            <span>{`${idx}: `}</span>\n                                            <JsonView obj={item} \n                                            comma={idx !== array.length - 1} \n                                            name={idx}\n                                            notifyParent={childChanged}\n                                            />\n                                        \n                                        </div>\n                                    }\n                                    {\n                                        Array.isArray(item)\n                                        && <div className=\"d-flex\">\n                                            <button className=\"my-button pop-button\" onClick={() => popItem(idx)}>\n                                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-x-lg\" viewBox=\"0 0 16 16\">\n                                            <path d=\"M1.293 1.293a1 1 0 0 1 1.414 0L8 6.586l5.293-5.293a1 1 0 1 1 1.414 1.414L9.414 8l5.293 5.293a1 1 0 0 1-1.414 1.414L8 9.414l-5.293 5.293a1 1 0 0 1-1.414-1.414L6.586 8 1.293 2.707a1 1 0 0 1 0-1.414z\"/>\n                                            </svg>\n                                            </button>\n                                            <span>{`${idx}: `}</span>\n                                            <ArrayView array={item} \n                                            comma={idx !== array.length - 1}\n                                            name={idx}\n                                            notifyParent={childChanged} />\n                                            \n                                        </div>\n                                    }\n                                    {\n                                        typeof item === 'boolean'\n                                        && <div className=\"d-inline-block form-check form-switch\">\n                                        <button className=\"my-button pop-button\" onClick={() => popItem(idx)}>\n                                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-x-lg\" viewBox=\"0 0 16 16\">\n                                        <path d=\"M1.293 1.293a1 1 0 0 1 1.414 0L8 6.586l5.293-5.293a1 1 0 1 1 1.414 1.414L9.414 8l5.293 5.293a1 1 0 0 1-1.414 1.414L8 9.414l-5.293 5.293a1 1 0 0 1-1.414-1.414L6.586 8 1.293 2.707a1 1 0 0 1 0-1.414z\"/>\n                                        </svg>\n                                        </button>\n                                        <label className=\"form-label\">{`${idx}: `}</label>\n                                        <input name={idx}\n                                         type=\"checkbox\"\n                                         checked={array[idx]}\n                                         value={array[idx]} \n                                         onChange={handleBooleanChange}\n                                         className=\"form-check-input\"></input>\n                                        {(idx !== array.length - 1) && ','}\n                                        </div>\n                                    }\n                                    {\n                                        typeof item === 'number'\n                                        && <div className=\"d-inline-block\">\n                                        <button className=\"my-button pop-button\" onClick={() => popItem(idx)}>\n                                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-x-lg\" viewBox=\"0 0 16 16\">\n                                        <path d=\"M1.293 1.293a1 1 0 0 1 1.414 0L8 6.586l5.293-5.293a1 1 0 1 1 1.414 1.414L9.414 8l5.293 5.293a1 1 0 0 1-1.414 1.414L8 9.414l-5.293 5.293a1 1 0 0 1-1.414-1.414L6.586 8 1.293 2.707a1 1 0 0 1 0-1.414z\"/>\n                                        </svg>\n                                        </button>\n                                        <label className=\"form-label\">{`${idx}: `}</label>\n                                        <input className=\"form-control d-inline-block ms-2\" name={idx} type=\"number\" value={array[idx]} onChange={handleNumberChange}></input>\n                                        {(idx !== array.length - 1) && ','}</div>\n                                    }\n                                    {\n                                        typeof item === 'string'\n                                        && <div className=\"d-inline-block\">\n                                        <button className=\"my-button pop-button\" onClick={() => popItem(idx)}>\n                                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-x-lg\" viewBox=\"0 0 16 16\">\n                                        <path d=\"M1.293 1.293a1 1 0 0 1 1.414 0L8 6.586l5.293-5.293a1 1 0 1 1 1.414 1.414L9.414 8l5.293 5.293a1 1 0 0 1-1.414 1.414L8 9.414l-5.293 5.293a1 1 0 0 1-1.414-1.414L6.586 8 1.293 2.707a1 1 0 0 1 0-1.414z\"/>\n                                        </svg>\n                                        </button>\n                                        <label className=\"form-label\">{`${idx}: `}</label>\n                                        <input className=\"form-control d-inline-block ms-2\" name={idx} type=\"text\" value={array[idx]} onChange={handleChange}></input>\n                                        {(idx !== array.length - 1) && ','}</div>\n                                    }\n                                </div>\n                            )\n                        })\n                        : <button className=\"\" onClick={() => {setShow(!show)}}>{show ? '▼' : '▶'}</button>\n                        }\n                    </div>\n                </div>\n                : '...' }\n            { comma ? '],' : ']' }\n        </div>\n    )\n}\n\nexport default JsonView;","import React, { useState } from 'react';\nimport { JsonService } from './services/JsonService';\nimport JsonView from './components/JsonView';\nimport HTTPservice from './services/HTTPservice.js';\nimport './App.css';\n\nfunction App() {\n\n  const [obj, setObj] = useState({});\n\n  const fetching = async(url) => {\n    const res = await fetch(url);\n    const rawData = await res.text();\n    return rawData;\n  }\n\n  const handleSubmit = async(event) => {\n    event.preventDefault();\n    const searchingFor = event.target[0].value;\n    const rawData = await fetching(searchingFor);\n    const foundJson = JsonService.findJson(rawData, 0);\n    console.log(foundJson);\n    setObj(foundJson);\n  }\n  \n  const save = async() => {\n    try {\n        const res = await HTTPservice.post(obj);\n        console.log(res);\n    } catch (e) {\n        console.error(e);\n    }  \n  }\n\n  const setModifiedJson = (name, modified) => {\n    setObj(modified);\n  }\n\n  return (\n    <div className=\"container\">\n      <form onSubmit={handleSubmit} className=\"row mt-5\">\n        <div className=\"col-sm-4\">\n          <label for=\"url\">Where is JSON?</label>\n        </div>\n        <div className=\"col-sm-4\">\n          <input type=\"text\" name=\"url\" id=\"url\" className=\"form-control\" placeholder=\"Paste here url to search for JSON\"></input>\n        </div>\n        <div className=\"col-sm-4\">\n          <button className=\"btn btn-success\">There</button>\n        </div>\n        <button type=\"button\" className=\"btn btn-primary\" onClick={save}>Save</button>\n      </form>\n      <JsonView obj={obj} name=\"JSON\" comma={false} notifyParent={setModifiedJson} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}